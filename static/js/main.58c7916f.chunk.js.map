{"version":3,"sources":["components/Cell.js","components/Queue.js","components/Board.js","App.js","reportWebVitals.js","index.js"],"names":["mapping","Cell","props","state","i","index","row","col","isBomb","number","isExposed","isGuess","handleClick","onClick","handleRightClick","onContextMenu","class_name","value","this","className","React","Component","Queue","queue","offset","getLength","length","isEmpty","enqueue","item","push","dequeue","slice","peek","undefined","deltas","Board","init_board","board","bombs","rows","N","cols","nBombs","cells","numUnexposedRemaining","isGameOver","isVictory","bind","handleReset","Array","fill","tmp_board","array","j","Math","floor","random","temp","shuffleArray","set","Set","numbers","set_numbers","from","map","object","has","setState","elem","exposeCell","num_exposed","expand_region","remaining_cells","game_over","victory","bindex","to_rc","bomb_row","bomb_col","d","r","c","to_index","q","current","curr_row","curr_col","neighbor","status","render_status_string","board_rows","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.58c7916f.chunk.js","sourcesContent":["import React from 'react';\nimport './Cell.css';\n\nconst mine_char = \"\\u{1f4a3}\";\nconst guess_char = \"\\u{1f6a9}\";\n\nconst mapping = {0:\"zero\", 1:\"one\", 2:\"two\", 3:\"three\", 4:\"four\", 5:\"five\", 6:\"six\", 7:\"seven\", 8:\"eight\"}\n\nclass Cell extends React.Component{\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      i: props.index,\n      row: props.row,\n      col: props.col,\n      isBomb: props.isBomb,\n      number: props.number,\n      isExposed: props.isExposed,\n      isGuess: props.isGuess\n    }\n\n    this.handleClick = props.onClick\n    this.handleRightClick = props.onContextMenu\n\n  }\n\n\n  render() {\n    let class_name = '';\n    let value = '';\n\n    if (this.state.isExposed) {\n      class_name = 'exposed'\n      if (this.state.isBomb) {\n        value = mine_char;\n      } else {\n        value = this.state.number;\n        class_name = `${class_name} ${mapping[value]}`;\n      }\n    } else if (this.state.isGuess) {\n      value = guess_char;\n    }\n\n    return (<button\n      className={'cell ' + class_name}\n      onClick={this.handleClick}\n      onContextMenu={this.handleRightClick}>\n        {value}\n    </button>\n  )\n  }\n\n}\n\nexport default Cell;\n","/*\n\nQueue.js\n\nA function to represent a queue\n\nCreated by Kate Morley - http://code.iamkate.com/ - and released under the terms\nof the CC0 1.0 Universal legal code:\n\nhttp://creativecommons.org/publicdomain/zero/1.0/legalcode\n\n*/\n\n/* Creates a new queue. A queue is a first-in-first-out (FIFO) data structure -\n * items are added to the end of the queue and removed from the front.\n */\nfunction Queue(){\n\n  // initialise the queue and offset\n  var queue  = [];\n  var offset = 0;\n\n  // Returns the length of the queue.\n  this.getLength = function(){\n    return (queue.length - offset);\n  }\n\n  // Returns true if the queue is empty, and false otherwise.\n  this.isEmpty = function(){\n    return (queue.length === 0);\n  }\n\n  /* Enqueues the specified item. The parameter is:\n   *\n   * item - the item to enqueue\n   */\n  this.enqueue = function(item){\n    queue.push(item);\n  }\n\n  /* Dequeues an item and returns it. If the queue is empty, the value\n   * 'undefined' is returned.\n   */\n  this.dequeue = function(){\n\n    // if the queue is empty, return immediately\n    if (queue.length === 0) return undefined;\n\n    // store the item at the front of the queue\n    var item = queue[offset];\n\n    // increment the offset and remove the free space if necessary\n    if (++ offset * 2 >= queue.length){\n      queue  = queue.slice(offset);\n      offset = 0;\n    }\n\n    // return the dequeued item\n    return item;\n\n  }\n\n  /* Returns the item at the front of the queue (without dequeuing it). If the\n   * queue is empty then undefined is returned.\n   */\n  this.peek = function(){\n    return (queue.length > 0 ? queue[offset] : undefined);\n  }\n\n}\n\nexport default Queue;\n","import React from 'react';\nimport Cell from './Cell';\nimport Queue from './Queue';\nimport './Board.css';\n\nconst deltas = [\n  [-1, -1], [-1, 0], [-1, 1],\n  [ 0, -1],          [ 0, 1],\n  [ 1, -1], [ 1, 0], [ 1, 1]\n];\n\n\n/* Randomize array in-place using Durstenfeld shuffle algorithm */\nfunction shuffleArray(array) {\n    for (let i = array.length - 1; i > 0; i--) {\n        let j = Math.floor(Math.random() * (i + 1));\n        let temp = array[i];\n        array[i] = array[j];\n        array[j] = temp;\n    }\n}\n\n\nclass Board extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    let [board, bombs] = this.init_board(props)\n\n    this.state = {\n      rows: props.N,\n      cols:props.N,\n      nBombs: props.nBombs,\n      cells: board,\n      bombs: bombs,\n      numUnexposedRemaining: props.N * props.N,\n      isGameOver: false,\n      isVictory: false\n    }\n\n    this.handleClick = this.handleClick.bind(this);\n    this.handleReset = this.handleReset.bind(this);\n\n  }\n\n  init_board(props) {\n    let N = props.N;\n\n    let board = Array(N*N).fill(null);\n    let tmp_board = Array(N*N).fill(null);\n    for (var i = 0; i < tmp_board.length; i++) {\n      tmp_board[i] = i\n    }\n    shuffleArray(tmp_board);\n\n    let set = new Set(tmp_board.slice(0, props.nBombs));\n    let numbers = this.set_numbers(N, Array.from(set));\n\n\n    board = board.map(\n      (object, i) =>\n        <Cell\n          key={i}\n          i={i}\n          row={Math.floor(i / props.N)}\n          col={i % props.N}\n          number={numbers[i]}\n          isBomb={set.has(i) ? true : false}\n          isExposed={false}\n          isGuess={false}\n          onClick={() => this.handleClick(i)}\n        />\n    )\n\n    return [board, Array.from(set)]\n\n  }\n\n  handleReset() {\n    let [board, bombs] = this.init_board(this.props)\n\n    this.setState((state) => ({\n      rows: this.props.N,\n      cols: this.props.N,\n      nBombs: this.props.nBombs,\n      cells: board,\n      bombs: bombs,\n      numUnexposedRemaining: this.props.N * this.props.N,\n      isGameOver: false,\n      isVictory: false\n    }));\n  }\n\n  exposeCell(elem) {\n    return (<Cell\n      key={elem.props.index}\n      i={elem.props.index}\n      row={elem.props.row}\n      col={elem.props.col}\n      number={elem.props.number}\n      isBomb={elem.props.isBomb}\n      isExposed={true}\n      isGuess={false}\n    />)\n  }\n\n  handleClick(i) {\n\n    if (this.state.isGameOver) {\n      return;\n    }\n\n    let elem = this.state.cells[i];\n    let board = this.state.cells;\n\n    board[i] = this.exposeCell(elem);\n\n    // Need to BFS to all other boards to expose\n    let num_exposed = 0;\n    [board, num_exposed] = this.expand_region(board, i)\n\n    let remaining_cells = this.state.numUnexposedRemaining - num_exposed;\n    // GAME OVER 1 -> YOU HIT A BOMB\n    let game_over = (elem.props.isBomb || (remaining_cells === this.state.nBombs) );\n    let victory = (game_over && !elem.props.isBomb);\n\n    if (game_over) { //expose bombs\n      for (var index = 0; index < this.state.nBombs; index++) {\n        let bindex = this.state.bombs[index];\n        board[bindex] = this.exposeCell(board[bindex]);\n      }\n    }\n\n    this.setState((state) => ({\n      cells: board,\n      isGameOver: game_over,\n      isVictory: victory,\n      numUnexposedRemaining: remaining_cells\n    }))\n\n  }\n\n  to_rc(index) {\n    return [Math.floor(index / this.props.N), index % this.props.N];\n  }\n\n  to_index(row, col) {\n    return this.props.N * row + col\n  }\n\n  set_numbers(N, bombs) {\n     let numbers = Array(N * N).fill(0);\n     for (var i = 0; i < bombs.length; i++) {\n       let [bomb_row, bomb_col] = this.to_rc(bombs[i]);\n       for (var d = 0; d < deltas.length; d++) {\n         let r = bomb_row + deltas[d][0];\n         let c = bomb_col + deltas[d][1];\n         if ( (r >= 0 && r < N) && (c >= 0 && c < N) ) {\n           let index = this.to_index(r, c);\n           numbers[index] = numbers[index] +  1\n         }\n       }\n     }\n     return numbers\n  }\n\n  expand_region(board, index) {\n    let q = new Queue();\n    q.enqueue(index);\n    let num_exposed = 1;\n\n    while (!q.isEmpty()) {\n      let current = q.dequeue();\n      let [curr_row, curr_col] = this.to_rc(current);\n\n      for (var d = 0; d < deltas.length; d++) {\n        let r = curr_row + deltas[d][0];\n        let c = curr_col + deltas[d][1];\n        if ( (r >= 0 && r < this.props.N) && (c >= 0 && c < this.props.N) ) {\n          let index = this.to_index(r, c);\n          let neighbor = board[index];\n          if (!neighbor.props.isBomb && !neighbor.props.isExposed) {\n            board[index] = this.exposeCell(neighbor); // expose neighbor\n            num_exposed += 1;\n          }\n          if (neighbor.props.number === 0 && !neighbor.props.isBomb && !neighbor.props.isExposed) {\n            q.enqueue(neighbor.props.i);\n          }\n        }\n      }\n    }\n    return [board, num_exposed];\n  }\n\n\n  render_status_string() {\n    if (this.state.isGameOver && !this.state.isVictory) {\n      return `BUST!! You had ${this.state.numUnexposedRemaining} cells remaining 😭`;\n    }\n    if (this.state.isGameOver && this.state.isVictory) {\n      return `YAY!! You cleared the minefield!! 😊`;\n    }\n    return `You have ${this.state.numUnexposedRemaining} cells remaining`;\n  }\n\n\n  render() {\n    const status = this.render_status_string();\n\n    const board_rows = Array(this.state.rows).fill(null).map(\n      (elem, i) => (\n        <div className=\"board-row\" key={100 + i}>\n          {this.state.cells.slice(i * this.state.cols, i * this.state.cols + this.state.cols)}\n        </div>\n      )\n    );\n\n    return (\n      <div>\n        <div className=\"status\">{status}</div>\n        <div className=\"board\">\n          {board_rows}\n        </div>\n        <div className=\"status\">\n          <button className=\"status-button\" onClick={this.handleReset}>Reset</button>\n        </div>\n      </div>\n    )\n\n\n\n  }\n\n\n\n\n}\n\n\nexport default Board;\n","import React from 'react';\nimport './App.css';\nimport Board from './components/Board';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Board N={30} nBombs={150}/>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}